/*
 Solution - I (Backtracking + DFS)

There isn't a specific strategy that we can apply to choose our paths since we dont initially know what a cell value might be and so we must
explore the whole grid exhaustively, visiting one cell after another, starting from G[i][j] = 1. If at any point we -reach an obstacle or,
visit an empty cell twice or,reach end cell without visiting each empty cells,then we know that we have reached an invalid path. We will discard
this path or in other words, we will backtrack from the current point and explore other options. We also need to mark a cell so that we know that
this cell is visited. We do this by changing a visited cell value to 3 (if input modification isn't allowed - see below).
We change it back to 0 if we backtrack.

We continue the above process till we reach the end cell and have visited all empty cells once. At this point, we have found a valid path and 
we increment the resultant count.*/




class Solution {
public:
    int uniquePathsIII(vector<vector<int>>& G) {
        int startRow, startCol, cellsToVisit = 0;
        for(int i = 0; i < size(G); i++)
            for(int j = 0; j < size(G[0]); j++) 
                if(G[i][j] == 1) startRow = i, startCol = j;
                else if(G[i][j] != -1) cellsToVisit++;
				
        dfs(G, startRow, startCol, cellsToVisit);
        return ans;
    }
private:
    int ans = 0, dir[5] {0, 1, 0, -1, 0};  // <- a common way to make 4-way exploration in dfs concise
	
	// checks if cell is valid. If none of 3 points mentioned in post is satisfied, it is a valid cell
    bool isValidCell(vector<vector<int>>& G, int i, int j) {
        return i >= 0 && j >= 0 && i < size(G) && j < size(G[0]) && G[i][j] != -1 && G[i][j] != 3;
    }
	
    void dfs(vector<vector<int>>& G, int i, int j, int cellsToVisit) {
        if(not isValidCell(G, i, j)) return;   // return if cell is invalid
        if(G[i][j] == 2) {                     // reached end cell
            if(cellsToVisit == 0) ans++;       // if all cells are visited, increment valid path count
            return;                            // no further exploration possible after reaching end cell
        }
        G[i][j] = 3;                           // mark cell as visited
        for(int k = 0; k < 4; k++)             // explore path futher 4-directionally
            dfs(G, i + dir[k], j + dir[k+1], cellsToVisit - 1);    
        G[i][j] = 0;                           // backtrack
    }        
};
*************************************************************************************************************************************
Time Complexity : O(3m * n). At every cell (except the start cell), we can continue the path exploration in 3 direction
(after excuding previous visited cell) and there can be O(m*n) cells in total to be visited. In reality, the number of recursions 
required is much less due to dead-ends.
Space Complexity : O(m*n) required for implicit recursive stack in dfs.

****************************************************************************************************************************************




/* Solution - II (Backtracking + DFS + Bit Manipulation)

In the above solution, we were marking a visited cell by changing the grid's cell value. If the input grid cannot be modified,
we can use auxillary boolean matrix or make a copy of grid. However, an elegant solution is to use bitmask. This works because the 
grid is small enough to fit within integer bits (m * n <= 20).*/

*********************************************************************************************************************************************************

class Solution {
public:
    int uniquePathsIII(vector<vector<int>>& G) {
        int startRow, startCol, mask = 0;
        m = size(G), n = size(G[0]);
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++) {
                if(G[i][j] == 1) startRow = i, startCol = j;
                if(G[i][j] != -1) mask |= 1 << i*n+j;       // set bits of cells that need to be visited
            }

        dfs(G, startRow, startCol, mask);
        return ans;
    }
private:
    int m, n, ans = 0, dir[5] {0, 1, 0, -1, 0}; 
    bool isValidCell(vector<vector<int>>& G, int i, int j, int mask) {
        return i >= 0 && j >= 0 && i < size(G) && j < size(G[0]) && G[i][j] != -1 && mask & 1 << i*n+j;
    }
	
    void dfs(vector<vector<int>>& G, int i, int j, int mask) {
        if(not isValidCell(G, i, j, mask)) return;
        mask ^= 1 << i*n+j;                                  // mark as visited by unsetting bit
        if(G[i][j] == 2) {       
            if(!mask) ans++;                                 // valid path if all required cells are visited
            return;              
        }
        for(int k = 0; k < 4; k++)
            dfs(G, i + dir[k], j + dir[k+1], mask);
    }        
};


*************************************************************************************************************************************************************
Time Complexity : O(3m * n)
Space Complexity : O(m*n)
*********************
