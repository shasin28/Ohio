//1 oct
//1143. Longest Common Subsequence
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        
        int m=text1.size();
        int n=text2.size();
        
        int dp[m+1][n+1];
        memset(dp,0,sizeof(dp));
        for (auto i = 1; i <= text1.size(); ++i)
        for (auto j = 1; j <= text2.size(); ++j)
         if (text1[i - 1] == text2[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;
         else dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
      return dp[m][n];
        
    }
};
*************************************************
//3 oct 2021
//55. Jump Game--letcode
class Solution {
public:
    bool canJump(vector<int>& nums) {
       int n=nums.size();
        int mxm=nums[0];
        for(int i=1;i<n;i++)
        {
            if(i<=mxm)
            mxm=max(mxm,i+nums[i]);
            
        }
        return (mxm>=n-1);
    }
};
*************************************
//4 oct 2021
//beautiful soluion---I was complicating it for no reason---no dfs
//Leetcode:463. Island Perimeter
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        int r=grid.size();
    
        int c=grid[0].size();
        
        int full=0,part=0;
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==1)
                {
                    full++;
                    if(i!=0&&grid[i-1][j]==1)
                        part++;
                    if(j!=0&&grid[i][j-1]==1)
                        part++;
                    
                }
            }
        }
        
        return 4*full-2*part;
    }
};

*****************************************************************************************************************
//diameter of a binary tree
// 11 oct
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxdepth(TreeNode *root,int &dmeter)
    {
        if(root==NULL)
            return 0;
        int lmax=maxdepth(root->left,dmeter);
        int rmax=maxdepth(root->right,dmeter);
        dmeter=max(dmeter,lmax+rmax);
        return 1+max(lmax,rmax);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int dmeter=0;
        maxdepth(root,dmeter);
        return dmeter;
        
    }
};
*******************************************************
