//2 october 2021
#include <iostream>
#include<bits/stdc++.h>
using namespace std;




void routePairs(int maxTravelDist,vector<vector<int>>forwardRouteList,vector<vector<int>>returnRouteList)
{
    vector<vector<int>> res;
    
    
    int m=forwardRouteList.size();
    int n=returnRouteList.size();
    
    
        int sum=forwardRouteList[0][1];
        int search=maxTravelDist-sum;
        
        int j;
        for(j=0;j<n;j++)
        {
            if(returnRouteList[j][1]>=search)
            break;
        }
        
        if(returnRouteList[j][1]>search)
        j--;
        
        int best=-1;
        
        if(returnRouteList[j][1]+forwardRouteList[0][1]<=maxTravelDist)
        {
            vector<int>temp;
            best=returnRouteList[j][1]+forwardRouteList[0][1];
            temp.push_back(forwardRouteList[0][0]);
            temp.push_back(returnRouteList[j][0]);
            res.push_back(temp);
            
        }
        
        int k=j+1;
        if(res.size()!=0)
        {
        
        while(k<n&&returnRouteList[j][1]==returnRouteList[k][1])
        {
            vector<int>temp;
            temp.push_back(forwardRouteList[0][0]);
            temp.push_back(returnRouteList[k][0]);
            res.push_back(temp);
            k++;
        }
        }
        else
        return;
      
       
    for(int i=1;i<m;i++)
    {
        sum=forwardRouteList[i][1];
        search=maxTravelDist-sum;
        
          for(j=0;j<n;j++)
        {
            if(returnRouteList[j][1]>=search)
            break;
        }
        
        if(returnRouteList[j][1]>search)
        j--;
        
        
        if(returnRouteList[j][1]+forwardRouteList[i][1]<=maxTravelDist&&returnRouteList[j][1]+forwardRouteList[i][1]>=best)
        {
            if(returnRouteList[j][1]+forwardRouteList[i][1]>best)
            {
                res.clear();
                best=returnRouteList[j][1]+forwardRouteList[i][1];
            }
           
        
            vector<int>temp;
            temp.push_back(forwardRouteList[i][0]);
            temp.push_back(returnRouteList[j][0]);
            res.push_back(temp);
            
        }
        
        int k=j+1;
    
        while(k<n&&returnRouteList[j][1]==returnRouteList[k][1])
        {
            vector<int>temp;
            temp.push_back(forwardRouteList[i][0]);
            temp.push_back(returnRouteList[k][0]);
            res.push_back(temp);
            k++;
        }
        
    }
    
    for(int i=0;i<res.size();i++)
    {
        cout<<res[i][0]<<" "<<res[i][1]<<"\n";
    }
    
    
}

int main() {
    
    int maxTravelDist=1000;
    vector<vector<int>>forwardRouteList={{1,3000},{2,5000},{3,7000},{4,10000}};
    vector<vector<int>>returnRouteList={{1,2000},{2,3000},{3,4000},{4,5000}};
    routePairs(maxTravelDist,forwardRouteList,returnRouteList);
    
  
    
	
	return 0;
}
****************************************************************************************************************************************************************
//24oct 2021 techg 12:29
/*Enter your code here. Read input from STDIN. Print your output to STDOUT*/
#include<bits/stdc++.h>
using namespace std; 
const int mod=1e9 + 7;
#define frl(a, c) for (int(a) = 0; (a) < (c); (a)++) 
#define fri(a, b, c) for (int(a) = (b); (a) <= (c); (a)++) 
#define frr(a, b, c) for (int(a) = (b); (a) >= (c); (a)--) 
typedef long long int ll; 
typedef vector<int> vi; 
typedef pair<int, int> pi; 
#define F first 
#define S second 
#define PB push_back 
#define POB pop_back 
#define MP make_pair 
#define ssrt(k) sort(k.begin(),k.end())

using namespace std;
int main()
{
int n,h;
cin>>n>>h;
int hd[h];
unordered_map<int,bool>rox;
for(int i=0;i<h;i++)
{
cin>>hd[i];
rox[hd[i]-1]=true;
}
vector<int>adj[n];

for(int i=1;i<n;i++)
{
int u,v;
cin>>u>>v;
adj[u-1].push_back(v-1);
adj[v-1].push_back(u-1);
}
priority_queue<pair<int,pair<int,int>>>shasha;
for(int i=0;i<n;i++)
{
    if(rox[i]==true)
    {
	int dist[n];
	for(int j=0;j<n;j++)
	dist[j]=INT_MAX;
	dist[i]=0;
	queue<int>q;
	q.push(i);
	while(!q.empty())
	{
		int nod = q.front(); 
		q.pop();
		 
		for(auto iteratorr:adj[nod])
		{

		    if(dist[nod] + 1 < dist[iteratorr])
			{
		        dist[iteratorr]=dist[nod]+1;
		        q.push(iteratorr);
		    }
		} 
	}
	for(int k=i+1;k<n;k++)
	{
	    if(rox[k])
	    {
	shasha.push({dist[k],{i,k}});

	    }
	}
    }
}
unordered_map<int,bool>takitaki;
int distance=0;
int count=0;
while(count<h/2)
{
pair<int,pair<int,int>> temp=shasha.top();
shasha.pop();
int src=temp.second.first;
int dest=temp.second.second;
if(takitaki[src]==false&&takitaki[dest]==false)
{
	distance+=temp.first;
	takitaki[src]=true;
	takitaki[dest]=true;
	count++;
}
}
cout<<distance<<"\n";
}

